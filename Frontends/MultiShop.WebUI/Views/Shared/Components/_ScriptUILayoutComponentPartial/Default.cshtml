<a href="#" class="btn btn-primary back-to-top">
    <i class="fa fa-angle-double-up"></i>
</a>

<!-- JavaScript Libraries -->
<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.bundle.min.js"></script>
<script src="~/multishop/lib/easing/easing.min.js"></script>
<script src="~/multishop/lib/owlcarousel/owl.carousel.min.js"></script>

<!-- Contact Javascript File -->
<script src="~/multishop/mail/jqBootstrapValidation.min.js"></script>
<script src="~/multishop/mail/contact.js"></script>

<!-- Template Javascript -->
<script src="~/multishop/js/main.js"></script>

<!-- Toastr -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

<script>
    $(document).ready(function () {

        function loadMiniCart() {
            $.ajax({
                url: '/ShoppingCart/GetMiniCart',
                type: 'GET',
                success: function (result) {
                    $('#header-cart #mini-cart').html(result);
                },
                error: function () {
                    $('#header-cart #mini-cart').html('<div class="p-3 text-center text-muted small">Sepet yüklenemedi.</div>');
                }
            });
        }

        function updateCartCount() {
            $.ajax({
                url: '/ShoppingCart/GetCartCount',
                type: 'GET',
                success: function (count) {
                    $('#header-cart #cart-count').text(count);
                },
                error: function () {
                    console.warn('Sepet sayısı alınamadı.');
                }
            });
        }

        loadMiniCart();
        updateCartCount();

        $(document).on('click', '.btn-add-basket', function (e) {
            e.preventDefault();
            var productId = $(this).data('id');

            $.ajax({
                url: '/ShoppingCart/AddBasketItemAjax',
                type: 'POST',
                data: { id: productId },
                success: function (result) {
                    toastr.success('Ürün sepete eklendi!');
                    $('#header-cart #mini-cart').html(result);
                    updateCartCount();
                    $('#header-cart #mini-cart').addClass('active');
                },
                error: function () {
                    toastr.error('Sepete ekleme başarısız!');
                }
            });
        });

        $(document).on('click', '.remove-item', function (e) {
            e.preventDefault();
            var productId = $(this).data('id');
            var itemCard = $(this).closest('.mini-cart-item');

        itemCard.fadeOut(300, function () {
                $.ajax({
                    url: '/ShoppingCart/RemoveBasketItemAjax',
                    type: 'POST',
                    data: { id: productId },
                    success: function (result) {
                        $('#header-cart #mini-cart').html(result);
                        updateCartCount();
                    },
                    error: function () {
                        toastr.error('Ürün sepetten kaldırılamadı.');
                        itemCard.show();
                    }
                });
            });
        });

        $(document).on('click', '#header-cart #cartIcon', function (e) {
            e.preventDefault();
            var miniCart = $('#header-cart #mini-cart');
            if ($.trim(miniCart.html()) === '') { loadMiniCart(); }
            miniCart.toggleClass('active');
        });

        function adjustBodyPadding() {
            var headerHeight = $('.sticky-header-container').outerHeight() || 0;
            $('body').css('padding-top', headerHeight + 'px');
        }

        $(window).on('load resize', function () {
            adjustBodyPadding();
        });

        $(window).on('scroll', function () {
            adjustBodyPadding();
        });

    });

    document.addEventListener('click', async (e) => {

        if (e.target.closest('#btnOpenNewAddress')) {
            const formBox = document.getElementById('newAddressForm');
            if (!formBox) return;
            formBox.classList.toggle('d-none');
            if (!formBox.classList.contains('d-none')) {
                formBox.style.animation = 'slideDown .4s ease';
                formBox.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        }

        if (e.target.closest('#formNewAddress button[type="submit"]')) {
            e.preventDefault();
            const form = document.getElementById('formNewAddress');
            const fd = new FormData(form);
            const resp = await fetch('/Order/AddAddress', {
                method: 'POST',
                body: fd,
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            });

            const html = await resp.text();
            const wrapper = document.createElement('div');
            wrapper.innerHTML = html;
            const fresh = wrapper.querySelector('.address-step');
            const current = document.querySelector('.address-step');

            if (fresh && current) {
                current.replaceWith(fresh);
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
        }

        if (e.target.closest('#btnGoToPayment')) {
            const selected = document.querySelector('input[name="selectedAddress"]:checked');
            if (!selected) {
                alert('Lütfen bir adres seçiniz.');
                return;
            }

            const resp = await fetch('/Order/GoToPayment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: `selectedAddressId=${encodeURIComponent(selected.value)}`
            });

            if (resp.ok) {
                const html = await resp.text();
                const wrapper = document.createElement('div');
                wrapper.innerHTML = html;
                const paymentStep = wrapper.querySelector('.payment-step');
                const addressStep = document.querySelector('.address-step');

                if (paymentStep && addressStep) {
                    addressStep.replaceWith(paymentStep);
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                    if (window.mountPaymentCard) window.mountPaymentCard();
                }

                toastr.success('Adres seçildi! Ödeme ekranı yüklendi.');
            } else {
                toastr.error('Ödeme ekranı yüklenemedi.');
            }
        }
    });
</script>

<style>
    #header-cart #mini-cart {
        width: 300px;
        position: absolute;
        right: 0;
        top: 40px;
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #ddd;
        background: #fff;
        z-index: 99999 !important;
        backdrop-filter: blur(3px);
        opacity: 0;
        transform: translateY(-10px);
        pointer-events: none;
        transition: all 0.3s ease;
    }

        #header-cart #mini-cart.active {
            opacity: 1;
            transform: translateY(0);
            pointer-events: auto;
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
        }

    .mini-cart-item {
        transition: all 0.3s ease;
    }

        .mini-cart-item:hover {
            background: #f9f9f9;
            transform: scale(1.01);
        }

    #toast-container > .toast {
        background-color: #222 !important;
        color: #fff !important;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        font-weight: 500;
    }

    #toast-container > .toast-success {
        background-color: #28a745 !important;
    }

    #toast-container > .toast-error {
        background-color: #dc3545 !important;
    }

    #toast-container > .toast-message {
        font-size: 15px;
        padding: 10px;
    }

    .sticky-header-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        z-index: 9999;
        background: #fff;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
    }

        .sticky-header-container.active {
            box-shadow: 0 4px 14px rgba(0,0,0,0.15);
        }
</style>

<!-- ========================= -->
<!-- 💳 DELUXE GOLD EDITION   -->
<!-- ========================= -->
<style>
    /* Kart kabı */
    .deluxe-card-container {
        position: relative;
        width: 430px;
        height: 250px;
        perspective: 1000px;
        margin: 10px 0 20px 0;
    }

    .deluxe-card {
        width: 100%;
        height: 100%;
        position: relative;
        transform-style: preserve-3d;
        transition: transform 0.8s ease;
    }

        .deluxe-card.is-flipped {
            transform: rotateY(180deg);
        }

    .deluxe-card-face {
        position: absolute;
        inset: 0;
        border-radius: 10px;
        backface-visibility: hidden;
        color: #fff;
        padding: 22px;
        box-shadow: 0 8px 26px rgba(0, 0, 0, 0.25), inset 0 0 20px rgba(244, 196, 48, 0.1);
    }

    .deluxe-card-front {
        background: linear-gradient(145deg, #000000 0%, #f4c430 70%);
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        position: relative;
        overflow: hidden;
    }

    .deluxe-card-back {
        background: linear-gradient(145deg, #f4c430 0%, #000000 80%);
        transform: rotateY(180deg);
        padding-top: 28px;
        overflow: hidden;
    }

    /* Metal Chip */
    .chip {
        width: 54px;
        height: 38px;
        border-radius: 8px;
        position: relative;
        background: linear-gradient(180deg, #e8e3cf 0%, #bda66a 55%, #f4e4a6 100%);
        box-shadow: inset 0 2px 8px rgba(0, 0, 0, 0.25), 0 1px 0 rgba(255, 255, 255, 0.4);
    }

    .visa-logo {
        height: 38px;
        filter: drop-shadow(0 2px 2px rgba(0, 0, 0, 0.25));
    }

    .card-number {
        font-size: 22px;
        letter-spacing: 3px;
        font-family: "Courier New", monospace;
        margin-top: 18px;
        text-shadow: 0 0 8px rgba(0, 0, 0, 0.25);
    }

    .info {
        display: flex;
        justify-content: space-between;
        gap: 24px;
        font-size: 13.5px;
        text-transform: uppercase;
        margin-top: 14px;
    }

        .info span {
            display: block;
            color: rgba(255, 255, 255, 0.85);
        }

        .info strong {
            color: #fff;
            letter-spacing: 0.5px;
        }

    /* Secure badge aşağı taşındı */
    .secure-badge {
        position: absolute;
        right: 16px;
        bottom: 12px;
        background: rgba(0, 0, 0, 0.35);
        backdrop-filter: blur(3px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: #fff;
        border-radius: 10px;
        padding: 4px 10px;
        font-size: 11px;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    /* Deluxe input alanları */
    .deluxe-input,
    .payment-card .form-select {
        border: 1.6px solid #f4c430;
        border-radius: 10px;
        box-shadow: 0 3px 8px rgba(244, 196, 48, 0.1);
        transition: all 0.25s ease;
        font-weight: 600;
        margin-bottom: 8px;
    }

        .deluxe-input:focus,
        .payment-card .form-select:focus {
            border-color: #f2b500;
            box-shadow: 0 0 0 4px rgba(244, 196, 48, 0.25);
        }

    /* Select dropdown ikonu */
    .payment-card .form-select {
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 20 20'%3E%3Cpath fill='%23000000' d='M5.5 7l4.5 6 4.5-6z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 0.8rem center;
        background-size: 14px;
        padding-right: 2rem;
    }

    /* Ödeme Butonu */
    .btn-deluxe-pay {
        background: linear-gradient(90deg, #f4c430, #000000);
        color: #fff;
        font-weight: 700;
        border: none;
        border-radius: 50px;
        padding: 14px 0;
        letter-spacing: 0.6px;
        text-transform: uppercase;
        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
        transition: all 0.25s ease;
        margin-top: 15px;
        width: 100%;
    }

        .btn-deluxe-pay:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 24px rgba(244, 196, 48, 0.35);
            background: linear-gradient(90deg, #000000, #f4c430);
        }

    /* Arka yüz */
    .magnet {
        height: 50px;
        background: #0e0e0e;
        width: 100%;
        margin-bottom: 18px;
        border-radius: 6px;
    }

    .cvv-box {
        background: #fff;
        color: #000;
        border-radius: 8px;
        padding: 10px 14px;
        display: inline-block;
        font-weight: 700;
        letter-spacing: 3px;
        min-width: 78px;
        box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    /* Form boşlukları */
    #paymentForm .form-label {
        font-weight: 600;
        color: #444;
    }

    #paymentForm {
        margin-top: -10px;
    }
</style>

<script>
    window.mountPaymentCard = function () {
        const form = document.querySelector('#paymentForm');
        if (!form) return;

        if (document.querySelector('.deluxe-card-container')) return;

        const cardHTML = `
        <div class="deluxe-card-container">
          <div class="deluxe-card">
            <div class="deluxe-card-face deluxe-card-front">
              <div class="d-flex justify-content-between align-items-center">
                <div class="chip"></div>
                <img class="visa-logo" src="https://upload.wikimedia.org/wikipedia/commons/0/04/Visa.svg" alt="VISA"/>
              </div>
              <div class="card-number" id="cardNumberDisplay">0000 0000 0000 0000</div>
              <div class="info">
                <div>
                  <span>Kart Sahibi</span>
                  <strong id="cardHolderDisplay">AD SOYAD</strong>
                </div>
                <div>
                  <span>Son Kullanma</span>
                  <strong id="cardExpireDisplay">AA / YY</strong>
                </div>
              </div>
            </div>
            <div class="deluxe-card-face deluxe-card-back">
              <div class="magnet"></div>
              <div class="cvv-box" id="cardCvvDisplay">•••</div>
              <img class="back-visa" src="https://upload.wikimedia.org/wikipedia/commons/0/04/Visa.svg" alt="VISA" style="height:32px;position:absolute;bottom:18px;right:18px;opacity:.9;">
            </div>
          </div>
        </div>`;

        const host = document.querySelector('.payment-card');
        host.insertAdjacentHTML('afterbegin', cardHTML);

        const card = document.querySelector('.deluxe-card');
        const numberInp = form.querySelector('input[name="CardNumber"]');
        const holderInp = form.querySelector('input[name="CardName"]');
        const monthSel = form.querySelector('select[name="ExpMonth"]');
        const yearSel = form.querySelector('select[name="ExpYear"]');
        const cvvInp = form.querySelector('input[name="CVV"]');

        numberInp.addEventListener('input', e => {
            let val = e.target.value.replace(/\D/g, '').substring(0, 16);
            val = val.replace(/(.{4})/g, '$1 ').trim();
            e.target.value = val;
            document.getElementById('cardNumberDisplay').innerText = val || '0000 0000 0000 0000';
        });

        holderInp.addEventListener('input', e => {
            const name = (e.target.value || '').toUpperCase();
            document.getElementById('cardHolderDisplay').innerText = name || 'AD SOYAD';
        });

        const updateExp = () => {
            const mm = monthSel?.value || 'AA';
            const yy = yearSel?.value ? yearSel.value.toString().slice(-2) : 'YY';
            document.getElementById('cardExpireDisplay').innerText = `${mm} / ${yy}`;
        };
        monthSel.addEventListener('change', updateExp);
        yearSel.addEventListener('change', updateExp);

        cvvInp.addEventListener('focus', () => card.classList.add('is-flipped'));
        cvvInp.addEventListener('blur', () => card.classList.remove('is-flipped'));
        cvvInp.addEventListener('input', e => {
            document.getElementById('cardCvvDisplay').innerText = (e.target.value || '•••').replace(/\d/g, '•');
        });
    };

    document.addEventListener('DOMContentLoaded', () => {
        if (document.querySelector('#paymentForm')) {
            window.mountPaymentCard();
        }
    });
</script>
