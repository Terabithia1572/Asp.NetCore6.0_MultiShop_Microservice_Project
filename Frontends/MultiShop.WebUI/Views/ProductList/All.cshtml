@model IEnumerable<ResultProductWithCategoryDTO>
@{
    ViewData["Title"] = "Tüm Ürünler - MultiShop Deluxe Edition V3";
    Layout = "~/Views/UILayout/_UILayout.cshtml";

    // İndirim sözlüğü: ProductID -> %Oran (Controller’dan set edilecek; gelmezse null olabilir)
    var discounts = ViewBag.Discounts as IDictionary<string, decimal>;
}

<!-- 🏷️ Filtre Bar (Sticky + Deluxe) -->
<section class="filter-bar sticky-top py-3 bg-white shadow-sm border-bottom">
    <div class="container-fluid px-xl-5 d-flex flex-wrap justify-content-between align-items-center gap-3">
        <h4 class="fw-bold text-dark m-0">
            <i class="fa fa-box-open text-deluxe me-2"></i> Tüm Ürünler
        </h4>

        <div class="d-flex gap-3">
            <!-- 🔹 Kategori Filtresi (Deluxe Select) -->
            <div class="deluxe-select-wrapper">
                <select id="categoryFilter" class="deluxe-select">
                    <option value="">Tüm Kategoriler</option>
                    @await Html.PartialAsync("_CategoryDropdownPartial", (IEnumerable<ResultCategoryDTO>)ViewBag.Categories)
                </select>
                <i class="fa fa-chevron-down select-icon"></i>
            </div>

            <!-- 🔹 Sıralama (Deluxe Select) -->
            <div class="deluxe-select-wrapper">
                <select id="sortFilter" class="deluxe-select">
                    <option value="default">Sıralama</option>
                    <option value="price-asc">Fiyat: Artan</option>
                    <option value="price-desc">Fiyat: Azalan</option>
                    <option value="name-asc">İsim: A→Z</option>
                    <option value="name-desc">İsim: Z→A</option>
                </select>
                <i class="fa fa-chevron-down select-icon"></i>
            </div>
        </div>
    </div>
</section>

<!-- 🔥 Ürün Listesi Alanı (footer'dan boşluk için section içine aldım) -->
<section class="deluxe-shop-section py-5">
    <div class="container-fluid px-xl-5">
        <div id="productListContainer" class="fade-in">
            @await Html.PartialAsync("_ProductGridPartial", Model)
        </div>
    </div>
</section>

<!-- 💅 Deluxe Styles -->
<style>
    :root {
        --deluxe-gold: #f5cf42;
        --deluxe-lightgold: #ffe78f;
        --deluxe-bg: #fffef8;
    }

    body {
        background: var(--deluxe-bg);
    }

    .text-deluxe {
        color: var(--deluxe-gold) !important;
    }

    .deluxe-shop-section {
        background: linear-gradient(180deg,#fffefc,#fffaf0);
        min-height: 75vh;
        padding-bottom: 100px;
    }

    .product-grid {
        row-gap: 2.5rem !important;
    }

    .deluxe-card {
        transition: all .35s ease;
        border-radius: 20px;
        box-shadow: 0 6px 18px rgba(245,207,66,.18);
        border: 1px solid rgba(245,207,66,.2);
        background: #fff;
        position: relative;
        overflow: hidden;
    }

        .deluxe-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 10px 28px rgba(245,207,66,.35);
            border-color: var(--deluxe-gold);
        }

    .discount-badge {
        position: absolute;
        top: 12px;
        left: 12px;
        background: var(--deluxe-gold);
        color: #111;
        font-weight: 700;
        padding: 4px 10px;
        font-size: .8rem;
        border-radius: 8px;
        z-index: 3;
        box-shadow: 0 2px 8px rgba(0,0,0,.1);
    }

    .deluxe-img {
        position: relative;
        height: 260px;
        overflow: hidden;
    }

        .deluxe-img img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform .5s ease, filter .4s ease;
        }

    .deluxe-card:hover .deluxe-img img {
        transform: scale(1.08);
        filter: brightness(0.9);
    }

    .deluxe-card::before {
        content: "";
        position: absolute;
        inset: 0;
        background: linear-gradient(120deg, transparent 0%, rgba(245,207,66,0.25) 50%, transparent 100%);
        transform: translateX(-100%);
        transition: transform 0.8s ease;
    }

    .deluxe-card:hover::before {
        transform: translateX(100%);
    }

    .deluxe-overlay {
        position: absolute;
        inset: 0;
        background: linear-gradient(to top, rgba(245,207,66,.65), rgba(0,0,0,0) 60%);
        opacity: 0;
        transition: opacity .35s ease;
    }

    .deluxe-card:hover .deluxe-overlay {
        opacity: 1;
    }

    .add-btn, .detail-btn {
        background: rgba(255,255,255,.92);
        color: #111;
        font-weight: 600;
        border-radius: 999px;
        padding: 8px 18px;
        border: 1px solid var(--deluxe-gold);
        text-decoration: none;
        transition: all .25s ease;
    }

    .detail-btn {
        background: rgba(245,207,66,.15);
        color: var(--deluxe-gold);
        font-weight: 500;
        padding: 6px 16px;
        margin-bottom: 4px;
    }

    .add-btn:hover {
        background: var(--deluxe-gold);
        color: #111;
        box-shadow: 0 0 15px rgba(245,207,66,.5);
    }

    .detail-btn:hover {
        background: var(--deluxe-gold);
        color: #111;
    }

    .price-wrapper {
        margin-top: 10px;
        gap: 8px;
        display: flex;
        justify-content: center;
        align-items: baseline;
    }

        .price-wrapper del {
            margin-right: 6px;
        }

    .new-price {
        color: var(--deluxe-gold);
        font-weight: 800;
        font-size: 1rem;
        transition: transform .4s ease, text-shadow .4s ease;
    }

    .deluxe-card:hover .new-price {
        transform: translateY(-3px);
        text-shadow: 0 0 8px rgba(245,207,66,.8);
    }

    .toast-box {
        position: fixed;
        bottom: 25px;
        right: 25px;
        background: rgba(255,255,255,.95);
        backdrop-filter: blur(12px);
        color: #111;
        padding: 14px 18px;
        border-radius: 16px;
        box-shadow: 0 8px 30px rgba(245,207,66,.4);
        border: 1px solid rgba(245,207,66,.3);
        z-index: 9999;
        opacity: 0;
        transform: translateY(20px);
        transition: all .3s ease;
    }

        .toast-box.show {
            opacity: 1;
            transform: translateY(0);
        }

    @@media (max-width:991px) {
        .deluxe-img {
            height: 220px;
        }
    }

    .category-pill {
        background: rgba(245,207,66,0.15);
        color: #8b7400;
        padding: 3px 10px;
        border-radius: 999px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .filter-bar {
        z-index: 50;
        border-top: 2px solid var(--deluxe-gold);
    }

    .deluxe-select-wrapper {
        position: relative;
        display: inline-block;
    }

    .deluxe-select {
        appearance: none;
        background: #fff;
        border: 1.5px solid var(--deluxe-gold);
        border-radius: 12px;
        padding: 6px 36px 6px 12px;
        font-size: 0.9rem;
        font-weight: 500;
        color: #444;
        transition: all 0.25s ease;
        cursor: pointer;
        min-width: 150px;
        box-shadow: 0 3px 8px rgba(245,207,66,0.1);
    }

        .deluxe-select:hover, .deluxe-select:focus {
            outline: none;
            border-color: #e3b800;
            box-shadow: 0 0 12px rgba(245,207,66,0.3);
        }

    .select-icon {
        position: absolute;
        right: 14px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--deluxe-gold);
        pointer-events: none;
        font-size: 0.8rem;
    }

    .fade-in {
        animation: fadeIn 0.45s ease;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(8px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<!-- ⚡ Script -->
<script>
    // 🔸 Global fonksiyonlar (her yerde erişilir)
    async function updateCartCount() {
        const countElement = document.querySelector('#cart-count');
        if (!countElement) return;
        try {
            const resp = await fetch('/ShoppingCart/GetCartCount', { credentials: 'include' });
            if (resp.ok) {
                const count = await resp.text();
                countElement.textContent = count;
                countElement.style.animation = 'bump .4s ease';
                setTimeout(() => countElement.style.animation = '', 400);
            }
        } catch {}
    }

    async function updateMiniCart() {
        const cart = document.querySelector('#mini-cart');
        if (!cart) return;
        try {
            const resp = await fetch('/ShoppingCart/GetMiniCart', { credentials: 'include' });
            if (resp.ok) {
                const html = await resp.text();
                cart.innerHTML = html;
            }
        } catch {}
    }

    // 🔁 Sepete ekle
    function rebindAddToCart() {
        document.querySelectorAll('.add-to-cart').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                e.preventDefault();
                const id = btn.dataset.id;
                try {
                    const resp = await fetch(`/ShoppingCart/AddBasketItemAjax?id=${id}`, {
                        method: 'POST',
                        credentials: 'include'
                    });

                    if (resp.status === 401) {
                        window.location.href = '/Login/Index';
                        return;
                    }

                    if (resp.ok) {
                        const html = await resp.text();
                        const cart = document.querySelector('#mini-cart');
                        if (cart) cart.innerHTML = html;
                        await updateCartCount();
                        showToast('🛒 Ürün sepete eklendi!');
                    } else {
                        showToast('⚠️ Sepete ekleme başarısız!');
                    }
                } catch {
                    showToast('⚠️ Sunucu hatası!');
                }
            });
        });
    }

    // 🔸 Filtreleme
    document.addEventListener('DOMContentLoaded', () => {
        const categorySelect = document.getElementById('categoryFilter');
        const sortSelect = document.getElementById('sortFilter');
        const container = document.getElementById('productListContainer');

        async function filterProducts() {
            const cat = categorySelect.value;
            const sort = sortSelect.value;
            const url = `/ProductList/FilterProducts?categoryId=${cat}&sort=${sort}`;
            try {
                container.classList.remove('fade-in');
                const resp = await fetch(url, { credentials: 'include' });
                const html = await resp.text();
                container.innerHTML = html;
                void container.offsetWidth;
                container.classList.add('fade-in');
                rebindAddToCart(); // 🧩 yeni kartlarda çalışsın
            } catch {
                container.innerHTML = "<div class='text-center text-muted py-5'>Bir hata oluştu.</div>";
            }
        }

        categorySelect.addEventListener('change', filterProducts);
        sortSelect.addEventListener('change', filterProducts);
        rebindAddToCart(); // ilk yüklemede bağla
    });

    // 💬 Toast
    function showToast(msg) {
        const toast = document.createElement('div');
        toast.className = 'toast-box';
        toast.textContent = msg;
        document.body.appendChild(toast);
        requestAnimationFrame(() => toast.classList.add('show'));
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        }, 1600);
    }
</script>
